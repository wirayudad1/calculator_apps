import '../setup/index.js';
import '../utils/click/isClickableInput.js';
import '../utils/dataTransfer/Clipboard.js';
import '../event/eventMap.js';
import '../event/behavior/click.js';
import '../event/behavior/cut.js';
import '../event/behavior/keydown.js';
import '../event/behavior/keypress.js';
import '../event/behavior/keyup.js';
import '../event/behavior/paste.js';
import '@testing-library/dom';
import '../utils/edit/maxLength.js';
import '../utils/edit/isEditable.js';
import '@testing-library/dom/dist/helpers.js';
import '../utils/keyDef/readNextDescriptor.js';
import { setLevelRef, ApiLevel } from '../utils/misc/level.js';
import { wait } from '../utils/misc/wait.js';
import '../options.js';
import { parseKeyDef } from './parseKeyDef.js';
import { Config } from '../setup/config.js';

async function pointer(input) {
    const { pointerMap  } = this[Config];
    const actions = [];
    (Array.isArray(input) ? input : [
        input
    ]).forEach((actionInput)=>{
        if (typeof actionInput === 'string') {
            actions.push(...parseKeyDef(pointerMap, actionInput));
        } else if ('keys' in actionInput) {
            actions.push(...parseKeyDef(pointerMap, actionInput.keys).map((i)=>({
                    ...actionInput,
                    ...i
                })));
        } else {
            actions.push(actionInput);
        }
    });
    for(let i = 0; i < actions.length; i++){
        await wait(this[Config]);
        await pointerAction(this[Config], actions[i]);
    }
    this[Config].system.pointer.resetClickCount();
}
async function pointerAction(config, action) {
    const pointerName = 'pointerName' in action && action.pointerName ? action.pointerName : 'keyDef' in action ? config.system.pointer.getPointerName(action.keyDef) : 'mouse';
    const previousPosition = config.system.pointer.getPreviousPosition(pointerName);
    const position = {
        target: action.target ?? getPrevTarget(config, previousPosition),
        coords: action.coords ?? previousPosition?.coords,
        caret: {
            node: action.node ?? (hasCaretPosition(action) ? undefined : previousPosition?.caret?.node),
            offset: action.offset ?? (hasCaretPosition(action) ? undefined : previousPosition?.caret?.offset)
        }
    };
    if ('keyDef' in action) {
        if (config.system.pointer.isKeyPressed(action.keyDef)) {
            setLevelRef(config, ApiLevel.Trigger);
            await config.system.pointer.release(config, action.keyDef, position);
        }
        if (!action.releasePrevious) {
            setLevelRef(config, ApiLevel.Trigger);
            await config.system.pointer.press(config, action.keyDef, position);
            if (action.releaseSelf) {
                setLevelRef(config, ApiLevel.Trigger);
                await config.system.pointer.release(config, action.keyDef, position);
            }
        }
    } else {
        setLevelRef(config, ApiLevel.Trigger);
        await config.system.pointer.move(config, pointerName, position);
    }
}
function hasCaretPosition(action) {
    return !!((action.target ?? action.node) ?? action.offset !== undefined);
}
function getPrevTarget(config, position) {
    if (!position) {
        throw new Error('This pointer has no previous position. Provide a target property!');
    }
    return position.target ?? config.document.body;
}

export { pointer };
