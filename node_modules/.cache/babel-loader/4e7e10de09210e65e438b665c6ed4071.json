{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { act } from 'react-dom/test-utils';\nimport { fetchCount } from './counterAPI';\ni = 0;\nconst initialState = {\n  value: 0,\n  status: 'idle'\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async amount => {\n  const response = await fetchCount(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'count',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    operation: (state, operator, number) => {\n      console.log(operator, number);\n    },\n    increment: (state, number) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      //console.log(storegrid)\n      state.value += 1;\n      console.log(state.value);\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      console.log(action);\n      state.value += action.payload;\n    },\n    decrementByAmount: (state, action) => {\n      state.value -= action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  decrementByAmount,\n  operation\n} = counterSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","act","fetchCount","i","initialState","value","status","incrementAsync","amount","response","data","counterSlice","name","reducers","operation","state","operator","number","console","log","increment","decrement","incrementByAmount","action","payload","decrementByAmount","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["/Users/dewan03/my-app/src/features/counter/counterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { act } from 'react-dom/test-utils';\nimport { fetchCount } from './counterAPI';\n\ni=0\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'count',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    operation:(state,operator,number)=>{\n      console.log(operator,number)\n      \n    },\n    increment: (state,number) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      //console.log(storegrid)\n      state.value += 1;\n      console.log(state.value)\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      console.log(action)\n      state.value += action.payload;\n    },\n    decrementByAmount: (state, action) => {\n      state.value -= action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount,decrementByAmount,operation } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,GAAT,QAAoB,sBAApB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEAC,CAAC,GAAC,CAAF;AACA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CADY;EAEnBC,MAAM,EAAE;AAFW,CAArB,C,CAKA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGR,gBAAgB,CAC5C,oBAD4C,EAE5C,MAAOS,MAAP,IAAkB;EAChB,MAAMC,QAAQ,GAAG,MAAMP,UAAU,CAACM,MAAD,CAAjC,CADgB,CAEhB;;EACA,OAAOC,QAAQ,CAACC,IAAhB;AACD,CAN2C,CAAvC;AASP,OAAO,MAAMC,YAAY,GAAGX,WAAW,CAAC;EACtCY,IAAI,EAAE,OADgC;EAEtCR,YAFsC;EAGtC;EACAS,QAAQ,EAAE;IACRC,SAAS,EAAC,CAACC,KAAD,EAAOC,QAAP,EAAgBC,MAAhB,KAAyB;MACjCC,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAAqBC,MAArB;IAED,CAJO;IAKRG,SAAS,EAAE,CAACL,KAAD,EAAOE,MAAP,KAAkB;MAC3B;MACA;MACA;MACA;MACA;MACAF,KAAK,CAACV,KAAN,IAAe,CAAf;MACAa,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACV,KAAlB;IACD,CAbO;IAcRgB,SAAS,EAAGN,KAAD,IAAW;MACpBA,KAAK,CAACV,KAAN,IAAe,CAAf;IACD,CAhBO;IAiBR;IACAiB,iBAAiB,EAAE,CAACP,KAAD,EAAQQ,MAAR,KAAmB;MACpCL,OAAO,CAACC,GAAR,CAAYI,MAAZ;MACAR,KAAK,CAACV,KAAN,IAAekB,MAAM,CAACC,OAAtB;IACD,CArBO;IAsBRC,iBAAiB,EAAE,CAACV,KAAD,EAAQQ,MAAR,KAAmB;MACpCR,KAAK,CAACV,KAAN,IAAekB,MAAM,CAACC,OAAtB;IACD;EAxBO,CAJ4B;EA8BtC;EACA;EACAE,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CACJC,OADH,CACWrB,cAAc,CAACsB,OAD1B,EACoCd,KAAD,IAAW;MAC1CA,KAAK,CAACT,MAAN,GAAe,SAAf;IACD,CAHH,EAIGsB,OAJH,CAIWrB,cAAc,CAACuB,SAJ1B,EAIqC,CAACf,KAAD,EAAQQ,MAAR,KAAmB;MACpDR,KAAK,CAACT,MAAN,GAAe,MAAf;MACAS,KAAK,CAACV,KAAN,IAAekB,MAAM,CAACC,OAAtB;IACD,CAPH;EAQD;AAzCqC,CAAD,CAAhC;AA4CP,OAAO,MAAM;EAAEJ,SAAF;EAAaC,SAAb;EAAwBC,iBAAxB;EAA0CG,iBAA1C;EAA4DX;AAA5D,IAA0EH,YAAY,CAACoB,OAA7F,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIjB,KAAD,IAAWA,KAAK,CAACkB,OAAN,CAAc5B,KAA7C,C,CAEP;AACA;;AACA,OAAO,MAAM6B,cAAc,GAAI1B,MAAD,IAAY,CAAC2B,QAAD,EAAWC,QAAX,KAAwB;EAChE,MAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;EACA,IAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;IAC1BF,QAAQ,CAACb,iBAAiB,CAACd,MAAD,CAAlB,CAAR;EACD;AACF,CALM;AAOP,eAAeG,YAAY,CAAC2B,OAA5B"},"metadata":{},"sourceType":"module"}