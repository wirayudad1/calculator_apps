{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { act, Simulate } from 'react-dom/test-utils';\nimport { fetchCount } from './counterAPI';\nlet initialState = {\n  value: 0,\n  operation: '',\n  result: 0,\n  doing: 0,\n  cal_display: 0,\n  status: 'idle'\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport let operator = '';\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async amount => {\n  const response = await fetchCount(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'count',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    operation(state, oper) {\n      console.log(state, oper);\n      operator = oper.payload;\n      state.cal_display += oper.payload;\n      state.result = parseFloat(state.value);\n      console.log(state, oper);\n    },\n\n    reset(state, oper) {\n      state.result = 0;\n      state.value = 0;\n      state.cal_display = 0;\n    },\n\n    increment: (state, number) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      //console.log(storegrid)\n      state.value += 1;\n      console.log(state.value);\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    calculationByAmount: (state, action) => {\n      let info = action.payload;\n      let data = [];\n      state.cal_display += action.payload['number'];\n      state.value = 0;\n      let lastNumber = state.cal_display.toString().split(/[\\s()*/%+-]+/); //let lastNumber=(state.cal_display.toString()).match((/-?\\d/g))\n      // console.log(state.cal_display)\n      // if(lastNumber.length==1){\n      //   if(state.cal_display==0)\n      //   {\n      //     state.cal_display+=action.payload['number']\n      //   }\n      //   else{\n      //     state.cal_display+=action.payload['number'].toString()\n      //   }\n      // }\n\n      if (info['operation'] == '+') {\n        console.log(state.result);\n\n        if (lastNumber.length > 3) {\n          state.value = parseInt(state.result);\n          state.value += parseInt(lastNumber[lastNumber.length - 1]);\n        } else {\n          for (let i = 0; i < lastNumber.length; i++) {\n            state.value += parseInt(lastNumber[i]);\n          }\n        }\n      } else if (info['operation'] == '-') {\n        state.value = state.result;\n        state.value -= lastNumber[lastNumber.length - 1];\n      }\n\n      console.log(state.result);\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  calculationByAmount,\n  decrementByAmount,\n  operation,\n  reset\n} = counterSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value;\nexport const cal_display = state => state.counter.cal_display; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {//dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","act","Simulate","fetchCount","initialState","value","operation","result","doing","cal_display","status","operator","incrementAsync","amount","response","data","counterSlice","name","reducers","state","oper","console","log","payload","parseFloat","reset","increment","number","decrement","calculationByAmount","action","info","lastNumber","toString","split","length","parseInt","i","extraReducers","builder","addCase","pending","fulfilled","decrementByAmount","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["/Users/dewan03/my-app/src/features/counter/counterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { act, Simulate } from 'react-dom/test-utils';\nimport { fetchCount } from './counterAPI';\n\nlet initialState = {\n  value: 0,\n  operation:'',\n  result:0,\n  doing:0,\n  cal_display:0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport let operator =''\n\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\nexport const counterSlice = createSlice({\n  name: 'count',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    operation(state,oper){\n      console.log(state,oper)\n      operator=oper.payload\n      state.cal_display+=oper.payload\n      state.result=parseFloat(state.value);\n      console.log(state,oper)\n    },\n    reset(state,oper){\n      state.result=0\n      state.value=0\n      state.cal_display=0\n    },\n    increment: (state,number) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      //console.log(storegrid)\n      state.value += 1;\n      console.log(state.value)\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    calculationByAmount: (state, action) => {\n      let info=action.payload;\n      let data=[];\n      state.cal_display+=action.payload['number']\n      state.value=0\n      let lastNumber=(state.cal_display.toString()).split(/[\\s()*/%+-]+/)\n      //let lastNumber=(state.cal_display.toString()).match((/-?\\d/g))\n      // console.log(state.cal_display)\n      // if(lastNumber.length==1){\n      //   if(state.cal_display==0)\n      //   {\n      //     state.cal_display+=action.payload['number']\n      //   }\n      //   else{\n      //     state.cal_display+=action.payload['number'].toString()\n      //   }\n      // }\n      if(info['operation']=='+')\n      {\n        console.log(state.result)\n        if(lastNumber.length>3)\n        {\n          state.value=parseInt(state.result);\n          state.value += parseInt(lastNumber[lastNumber.length-1]);\n        }\n        else{\n          for(let i=0 ; i<lastNumber.length;i++)\n          {\n            state.value += parseInt(lastNumber[i]);\n          }\n        }\n      }\n      else if(info['operation']=='-'){\n        state.value=state.result;\n        state.value -= lastNumber[lastNumber.length-1];\n       }\n       console.log(state.result)\n\n    },\n  \n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, calculationByAmount,decrementByAmount,operation,reset } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\nexport const cal_display = (state) => state.counter.cal_display;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    //dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}