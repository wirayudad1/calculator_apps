{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { act, Simulate } from 'react-dom/test-utils';\nimport { fetchCount } from './counterAPI';\nlet initialState = {\n  value: 0,\n  operation: '+',\n  status: 'idle'\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport let operator = '';\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async amount => {\n  const response = await fetchCount(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'count',\n  initialState,\n  me,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    operation(state, oper) {\n      console.log(state, oper);\n      operator = oper;\n      console.log(state, oper);\n    },\n\n    increment: (state, number) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      //console.log(storegrid)\n      state.value += 1;\n      console.log(state.value);\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    calculationByAmount: (state, action) => {\n      console.log(action);\n      let info = action.payload.operation;\n\n      if (info[operation] == '+') {\n        state.value += action.payload['number'];\n      } else if (info['operation'] == '-') {\n        state.value -= action.payload['number'];\n      }\n    },\n    decrementByAmount: (state, action) => {\n      state.value -= action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  calculationByAmount,\n  decrementByAmount,\n  operation\n} = counterSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {//dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","act","Simulate","fetchCount","initialState","value","operation","status","operator","incrementAsync","amount","response","data","counterSlice","name","me","reducers","state","oper","console","log","increment","number","decrement","calculationByAmount","action","info","payload","decrementByAmount","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["/Users/dewan03/my-app/src/features/counter/counterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { act, Simulate } from 'react-dom/test-utils';\nimport { fetchCount } from './counterAPI';\n\nlet initialState = {\n  value: 0,\n  operation:'+',\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport let operator =''\n\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\nexport const counterSlice = createSlice({\n  name: 'count',\n  initialState,\n  me,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    operation(state,oper){\n      console.log(state,oper)\n      operator=oper\n      console.log(state,oper)\n    },\n    increment: (state,number) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      //console.log(storegrid)\n      state.value += 1;\n      console.log(state.value)\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    calculationByAmount: (state, action) => {\n      console.log(action)\n      let info=action.payload.operation\n      if(info[operation]=='+')\n      {\n        state.value += action.payload['number'];\n      }\n      else if(info['operation']=='-'){\n        state.value -= action.payload['number'];\n      }\n    },\n    decrementByAmount: (state, action) => {\n      state.value -= action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, calculationByAmount,decrementByAmount,operation } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    //dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,sBAA9B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,IAAIC,YAAY,GAAG;EACjBC,KAAK,EAAE,CADU;EAEjBC,SAAS,EAAC,GAFO;EAGjBC,MAAM,EAAE;AAHS,CAAnB,C,CAMA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,QAAQ,GAAE,EAAd;AAEP,OAAO,MAAMC,cAAc,GAAGV,gBAAgB,CAC5C,oBAD4C,EAE5C,MAAOW,MAAP,IAAkB;EAChB,MAAMC,QAAQ,GAAG,MAAMR,UAAU,CAACO,MAAD,CAAjC,CADgB,CAEhB;;EACA,OAAOC,QAAQ,CAACC,IAAhB;AACD,CAN2C,CAAvC;AAQP,OAAO,MAAMC,YAAY,GAAGb,WAAW,CAAC;EACtCc,IAAI,EAAE,OADgC;EAEtCV,YAFsC;EAGtCW,EAHsC;EAItC;EACAC,QAAQ,EAAE;IACRV,SAAS,CAACW,KAAD,EAAOC,IAAP,EAAY;MACnBC,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAkBC,IAAlB;MACAV,QAAQ,GAACU,IAAT;MACAC,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAkBC,IAAlB;IACD,CALO;;IAMRG,SAAS,EAAE,CAACJ,KAAD,EAAOK,MAAP,KAAkB;MAC3B;MACA;MACA;MACA;MACA;MACAL,KAAK,CAACZ,KAAN,IAAe,CAAf;MACAc,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACZ,KAAlB;IACD,CAdO;IAeRkB,SAAS,EAAGN,KAAD,IAAW;MACpBA,KAAK,CAACZ,KAAN,IAAe,CAAf;IACD,CAjBO;IAkBR;IACAmB,mBAAmB,EAAE,CAACP,KAAD,EAAQQ,MAAR,KAAmB;MACtCN,OAAO,CAACC,GAAR,CAAYK,MAAZ;MACA,IAAIC,IAAI,GAACD,MAAM,CAACE,OAAP,CAAerB,SAAxB;;MACA,IAAGoB,IAAI,CAACpB,SAAD,CAAJ,IAAiB,GAApB,EACA;QACEW,KAAK,CAACZ,KAAN,IAAeoB,MAAM,CAACE,OAAP,CAAe,QAAf,CAAf;MACD,CAHD,MAIK,IAAGD,IAAI,CAAC,WAAD,CAAJ,IAAmB,GAAtB,EAA0B;QAC7BT,KAAK,CAACZ,KAAN,IAAeoB,MAAM,CAACE,OAAP,CAAe,QAAf,CAAf;MACD;IACF,CA7BO;IA8BRC,iBAAiB,EAAE,CAACX,KAAD,EAAQQ,MAAR,KAAmB;MACpCR,KAAK,CAACZ,KAAN,IAAeoB,MAAM,CAACE,OAAtB;IACD;EAhCO,CAL4B;EAuCtC;EACA;EACAE,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CACJC,OADH,CACWtB,cAAc,CAACuB,OAD1B,EACoCf,KAAD,IAAW;MAC1CA,KAAK,CAACV,MAAN,GAAe,SAAf;IACD,CAHH,EAIGwB,OAJH,CAIWtB,cAAc,CAACwB,SAJ1B,EAIqC,CAAChB,KAAD,EAAQQ,MAAR,KAAmB;MACpDR,KAAK,CAACV,MAAN,GAAe,MAAf;MACAU,KAAK,CAACZ,KAAN,IAAeoB,MAAM,CAACE,OAAtB;IACD,CAPH;EAQD;AAlDqC,CAAD,CAAhC;AAqDP,OAAO,MAAM;EAAEN,SAAF;EAAaE,SAAb;EAAwBC,mBAAxB;EAA4CI,iBAA5C;EAA8DtB;AAA9D,IAA4EO,YAAY,CAACqB,OAA/F,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIlB,KAAD,IAAWA,KAAK,CAACmB,OAAN,CAAc/B,KAA7C,C,CAEP;AACA;;AACA,OAAO,MAAMgC,cAAc,GAAI3B,MAAD,IAAY,CAAC4B,QAAD,EAAWC,QAAX,KAAwB;EAChE,MAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;EACA,IAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B,CAC1B;EACD;AACF,CALM;AAOP,eAAe3B,YAAY,CAAC4B,OAA5B"},"metadata":{},"sourceType":"module"}