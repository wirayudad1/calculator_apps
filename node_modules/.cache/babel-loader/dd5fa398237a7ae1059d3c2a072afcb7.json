{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { act, Simulate } from 'react-dom/test-utils';\nimport { fetchCount } from './counterAPI';\nlet initialState = {\n  value: 0,\n  operation: '',\n  result: 0,\n  clicknumber: 0,\n  doing: 0,\n  cal_display: 0,\n  status: 'idle'\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport let operator = '';\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async amount => {\n  const response = await fetchCount(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'count',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    operation(state, oper) {\n      console.log(state, oper);\n      operator = oper.payload;\n      state.cal_display += oper.payload;\n      state.result = parseFloat(state.value);\n      console.log(state.result);\n    },\n\n    reset(state, oper) {\n      state.result = 0;\n      state.value = 0;\n      operator = '';\n      state.cal_display = 0;\n      state.doing = 0;\n      state.clicknumber = 0;\n    },\n\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    calculationByAmount: (state, action) => {\n      let info = action.payload;\n      let data = [];\n      console.log(info.operation, state.doing);\n\n      if (state.doing == 0) {\n        if (state.clicknumber == 0) {\n          console.log('clickonce');\n          state.cal_display += action.payload['number'];\n          state.result = state.cal_display;\n          state.clicknumber++;\n        } else {\n          console.log('clickmany');\n          state.cal_display += action.payload['number'].toString();\n          state.result = state.cal_display;\n        }\n      } else {\n        state.cal_display += action.payload['number'];\n      } //state.cal_display+=action.payload['number']\n\n\n      state.value = 0;\n      let lastNumber = state.cal_display.toString().split(/[\\s()*/%+-]+/); //let lastNumber=(state.cal_display.toString()).match((/-?\\d/g))\n\n      console.log(state.cal_display, lastNumber); // if(lastNumber.length==1){\n      //   if(state.cal_display==0)\n      //   {\n      //     state.cal_display+=action.payload['number']\n      //   }\n      //   else{\n      //     state.cal_display+=action.payload['number'].toString()\n      //   }\n      // }\n      // else{\n      // }\n\n      if (info['operation'] == '+') {\n        console.log('sumdata');\n        state.doing = 1;\n\n        if (lastNumber.length >= 3) {\n          state.value = parseFloat(state.result);\n          state.value += parseFloat(lastNumber[lastNumber.length - 1]);\n        } else {\n          for (let i = 0; i < lastNumber.length; i++) {\n            state.value += parseFloat(lastNumber[i]);\n          }\n        }\n      } else if (info['operation'] == '-') {\n        state.doing = 1; // if(lastNumber.length>3)\n        // {\n        //   state.value=parseFloat(state.result);\n        //   state.value -= parseFloat(lastNumber[lastNumber.length-1]);\n        // }\n        // else{\n        //   for(let i=0 ; i<lastNumber.length;i++)\n        //   {\n        //     state.value -= parseFloat(lastNumber[i]);\n        //   }\n        // }\n\n        state.value = parseFloat(state.result);\n        state.value -= parseFloat(lastNumber[lastNumber.length - 1]);\n        state.result = state.value;\n      } else if (info['operation'] == '/') {\n        state.doing = 1;\n        state.value = parseFloat(state.result);\n        state.value /= parseFloat(lastNumber[lastNumber.length - 1]);\n        state.result = state.value;\n        console.log(state.value);\n      }\n\n      console.log(state.result);\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  calculationByAmount,\n  decrementByAmount,\n  operation,\n  reset\n} = counterSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value;\nexport const cal_display = state => state.counter.cal_display; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {//dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","act","Simulate","fetchCount","initialState","value","operation","result","clicknumber","doing","cal_display","status","operator","incrementAsync","amount","response","data","counterSlice","name","reducers","state","oper","console","log","payload","parseFloat","reset","calculationByAmount","action","info","toString","lastNumber","split","length","i","extraReducers","builder","addCase","pending","fulfilled","decrementByAmount","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["/Users/dewan03/my-app/src/features/counter/counterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { act, Simulate } from 'react-dom/test-utils';\nimport { fetchCount } from './counterAPI';\n\nlet initialState = {\n  value: 0,\n  operation:'',\n  result:0,\n  clicknumber:0,\n  doing:0,\n  cal_display:0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport let operator =''\n\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\nexport const counterSlice = createSlice({\n  name: 'count',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    operation(state,oper){\n      console.log(state,oper)\n      operator=oper.payload\n      state.cal_display+=oper.payload\n      state.result=parseFloat(state.value);\n      console.log(state.result)\n    },\n    reset(state,oper){\n      state.result=0\n      state.value=0\n      operator=''\n      state.cal_display=0\n      state.doing=0\n      state.clicknumber=0\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    calculationByAmount: (state, action) => {\n      let info=action.payload;\n      let data=[];\n      console.log(info.operation,state.doing)\n      if(state.doing==0){\n        if(state.clicknumber==0)\n        {\n          console.log('clickonce')\n          state.cal_display+=action.payload['number']\n          state.result=state.cal_display\n          state.clicknumber++\n        }   \n        else{\n           console.log('clickmany')\n            state.cal_display+=action.payload['number'].toString()\n            state.result=state.cal_display\n        }    \n      }\n      else\n      {\n        state.cal_display+=action.payload['number']\n      }\n      \n      //state.cal_display+=action.payload['number']\n      state.value=0\n      let lastNumber=(state.cal_display.toString()).split(/[\\s()*/%+-]+/)\n      //let lastNumber=(state.cal_display.toString()).match((/-?\\d/g))\n      console.log(state.cal_display, lastNumber)\n      // if(lastNumber.length==1){\n      //   if(state.cal_display==0)\n      //   {\n      //     state.cal_display+=action.payload['number']\n      //   }\n      //   else{\n      //     state.cal_display+=action.payload['number'].toString()\n      //   }\n      // }\n      // else{\n\n      // }\n      if(info['operation']=='+')\n      {\n        console.log('sumdata')\n        state.doing=1\n        if(lastNumber.length>=3)\n        {\n          state.value=parseFloat(state.result);\n          state.value += parseFloat(lastNumber[lastNumber.length-1]);\n        }\n        else{\n          for(let i=0 ; i<lastNumber.length;i++)\n          {\n            state.value += parseFloat(lastNumber[i]);\n          }\n        }\n      }\n      else if(info['operation']=='-'){\n        state.doing=1\n        // if(lastNumber.length>3)\n        // {\n        //   state.value=parseFloat(state.result);\n        //   state.value -= parseFloat(lastNumber[lastNumber.length-1]);\n        // }\n        // else{\n        //   for(let i=0 ; i<lastNumber.length;i++)\n        //   {\n        //     state.value -= parseFloat(lastNumber[i]);\n        //   }\n        // }\n       \n        state.value=parseFloat(state.result);\n        state.value -= parseFloat(lastNumber[lastNumber.length-1]);\n        state.result=state.value\n       }\n       else if(info['operation']=='/'){\n        state.doing=1\n        state.value=parseFloat(state.result);\n        state.value /= parseFloat(lastNumber[lastNumber.length-1]);\n        state.result=state.value\n        console.log(state.value)\n       }\n       console.log(state.result)\n\n    },\n  \n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { calculationByAmount,decrementByAmount,operation,reset } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\nexport const cal_display = (state) => state.counter.cal_display;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    //dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}