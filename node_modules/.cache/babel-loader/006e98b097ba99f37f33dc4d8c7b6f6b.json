{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nlet initialState = {\n  value: 0,\n  operation: '',\n  result: 0,\n  current_oper: '',\n  clicknumber: 0,\n  doing: 0,\n  cal_display: 0,\n  status: 'idle'\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport let operator = '';\nexport function coma(exist) {\n  return exist;\n}\nexport const counterSlice = createSlice({\n  name: 'count',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    operation(state, oper) {\n      console.log(state, oper);\n      operator = oper.payload['operation'];\n\n      if (state.current_oper == '' || oper.payload['koma'] == true) {\n        console.log('masukadaoper');\n        state.cal_display += oper.payload['operation'];\n        state.current_oper = oper.payload['operation'];\n      }\n\n      state.result = parseFloat(state.value);\n      console.log(state.result);\n    },\n\n    reset(state, oper) {\n      state.result = 0;\n      state.value = 0;\n      operator = '';\n      state.cal_display = 0;\n      state.doing = 0;\n      state.clicknumber = 0;\n    },\n\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    calculationByAmount: (state, action) => {\n      let info = action.payload;\n      let data = [];\n      state.current_oper = '';\n      console.log(info.operation, state.doing);\n\n      if (state.doing == 0) {\n        if (state.clicknumber == 0) {\n          console.log('clickonce');\n          state.cal_display += action.payload['number'];\n          state.result = state.cal_display;\n          state.clicknumber++;\n        } else {\n          console.log('clickmany');\n          state.cal_display += action.payload['number'].toString();\n          state.result = state.cal_display;\n        }\n      } else {\n        state.cal_display += action.payload['number'];\n      } //state.cal_display+=action.payload['number']\n\n\n      state.value = 0;\n      let lastNumber = state.cal_display.toString().split(/[\\s()x/%+-]+/); //let lastNumber=(state.cal_display.toString()).match((/-?\\d/g))\n\n      console.log(state.cal_display, lastNumber); // if(lastNumber.length==1){\n      //   if(state.cal_display==0)\n      //   {\n      //     state.cal_display+=action.payload['number']\n      //   }\n      //   else{\n      //     state.cal_display+=action.payload['number'].toString()\n      //   }\n      // }\n      // else{\n      // }\n\n      if (info['operation'] == '+') {\n        console.log('sumdata');\n        state.doing = 1;\n\n        if (lastNumber.length >= 3) {\n          state.value = parseFloat(state.result);\n          state.value += parseFloat(lastNumber[lastNumber.length - 1]);\n          console.log(state.value);\n        } else {\n          for (let i = 0; i < lastNumber.length; i++) {\n            state.value += parseFloat(lastNumber[i]);\n          }\n\n          console.log(state.value);\n        }\n      } else if (info['operation'] == '-') {\n        state.doing = 1; // if(lastNumber.length>3)\n        // {\n        //   state.value=parseFloat(state.result);\n        //   state.value -= parseFloat(lastNumber[lastNumber.length-1]);\n        // }\n        // else{\n        //   for(let i=0 ; i<lastNumber.length;i++)\n        //   {\n        //     state.value -= parseFloat(lastNumber[i]);\n        //   }\n        // }\n\n        state.value = parseFloat(state.result);\n        state.value -= parseFloat(lastNumber[lastNumber.length - 1]);\n        state.result = state.value;\n      } else if (info['operation'] == '/') {\n        state.doing = 1;\n        state.value = parseFloat(state.result);\n        state.value /= parseFloat(lastNumber[lastNumber.length - 1]);\n        state.result = state.value;\n        console.log(state.value);\n      } else if (info['operation'] == 'x') {\n        state.doing = 1;\n        state.value = parseFloat(state.result);\n        state.value *= parseFloat(lastNumber[lastNumber.length - 1]);\n        state.result = state.value;\n        console.log(state.value);\n      }\n\n      console.log(state.result);\n    }\n  } // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n\n});\nexport const {\n  calculationByAmount,\n  decrementByAmount,\n  operation,\n  reset\n} = counterSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value;\nexport const cal_display = state => state.counter.cal_display; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","value","operation","result","current_oper","clicknumber","doing","cal_display","status","operator","coma","exist","counterSlice","name","reducers","state","oper","console","log","payload","parseFloat","reset","calculationByAmount","action","info","data","toString","lastNumber","split","length","i","decrementByAmount","actions","selectCount","counter","reducer"],"sources":["/Users/dewan03/calculator_redux/src/features/calculator/calc_controller.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nlet initialState = {\n  value: 0,\n  operation:'',\n  result:0,\n  current_oper:'',\n  clicknumber:0,\n  doing:0,\n  cal_display:0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport let operator =''\nexport function coma(exist){\n  return exist\n}\nexport const counterSlice = createSlice({\n  name: 'count',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    operation(state,oper){\n      console.log(state,oper)\n      operator=oper.payload['operation']\n      if(state.current_oper==''||oper.payload['koma']==true){\n        console.log('masukadaoper')\n        state.cal_display+=oper.payload['operation']\n        state.current_oper=oper.payload['operation']\n      }\n      \n      state.result=parseFloat(state.value);\n      console.log(state.result)\n    },\n    reset(state,oper){\n      state.result=0\n      state.value=0\n      operator=''\n      state.cal_display=0\n      state.doing=0\n      state.clicknumber=0\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    calculationByAmount: (state, action) => {\n      let info=action.payload;\n      let data=[];\n      state.current_oper=''\n      console.log(info.operation,state.doing)\n      if(state.doing==0){\n        if(state.clicknumber==0)\n        {\n          console.log('clickonce')\n          state.cal_display+=action.payload['number']\n          state.result=state.cal_display\n          state.clicknumber++\n        }   \n        else{\n           console.log('clickmany')\n            state.cal_display+=action.payload['number'].toString()\n            state.result=state.cal_display\n        }    \n      }\n      else\n      {\n        state.cal_display+=action.payload['number']\n      }\n      \n      //state.cal_display+=action.payload['number']\n      state.value=0\n      let lastNumber=(state.cal_display.toString()).split(/[\\s()x/%+-]+/)\n      //let lastNumber=(state.cal_display.toString()).match((/-?\\d/g))\n      console.log(state.cal_display, lastNumber)\n      // if(lastNumber.length==1){\n      //   if(state.cal_display==0)\n      //   {\n      //     state.cal_display+=action.payload['number']\n      //   }\n      //   else{\n      //     state.cal_display+=action.payload['number'].toString()\n      //   }\n      // }\n      // else{\n\n      // }\n      if(info['operation']=='+')\n      {\n        console.log('sumdata')\n        state.doing=1\n        if(lastNumber.length>=3)\n        {\n          state.value=parseFloat(state.result);\n          state.value += parseFloat(lastNumber[lastNumber.length-1]);\n          console.log(state.value)\n        }\n        else{\n          for(let i=0 ; i<lastNumber.length;i++)\n          {\n            state.value += parseFloat(lastNumber[i]);\n          }\n          console.log(state.value)\n        }\n      }\n      else if(info['operation']=='-'){\n        state.doing=1\n        // if(lastNumber.length>3)\n        // {\n        //   state.value=parseFloat(state.result);\n        //   state.value -= parseFloat(lastNumber[lastNumber.length-1]);\n        // }\n        // else{\n        //   for(let i=0 ; i<lastNumber.length;i++)\n        //   {\n        //     state.value -= parseFloat(lastNumber[i]);\n        //   }\n        // }\n       \n        state.value=parseFloat(state.result);\n        state.value -= parseFloat(lastNumber[lastNumber.length-1]);\n        state.result=state.value\n       }\n       else if(info['operation']=='/'){\n        state.doing=1\n        state.value=parseFloat(state.result);\n        state.value /= parseFloat(lastNumber[lastNumber.length-1]);\n        state.result=state.value\n        console.log(state.value)\n       }\n       else if(info['operation']=='x'){\n        state.doing=1\n        state.value=parseFloat(state.result);\n        state.value *= parseFloat(lastNumber[lastNumber.length-1]);\n        state.result=state.value\n        console.log(state.value)\n       }\n      \n       console.log(state.result)\n\n    },\n  \n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  \n});\n\nexport const { calculationByAmount,decrementByAmount,operation,reset } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\nexport const cal_display = (state) => state.counter.cal_display;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport default counterSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}